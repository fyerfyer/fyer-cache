// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/fyerfyer/fyer-cache/cache"

	mock "github.com/stretchr/testify/mock"
)

// NodeTransporter is an autogenerated mock type for the NodeTransporter type
type NodeTransporter struct {
	mock.Mock
}

type NodeTransporter_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeTransporter) EXPECT() *NodeTransporter_Expecter {
	return &NodeTransporter_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with no fields
func (_m *NodeTransporter) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NodeTransporter_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type NodeTransporter_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *NodeTransporter_Expecter) Address() *NodeTransporter_Address_Call {
	return &NodeTransporter_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *NodeTransporter_Address_Call) Run(run func()) *NodeTransporter_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeTransporter_Address_Call) Return(_a0 string) *NodeTransporter_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeTransporter_Address_Call) RunAndReturn(run func() string) *NodeTransporter_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: nodeAddr, msg
func (_m *NodeTransporter) Send(nodeAddr string, msg *cache.NodeMessage) (*cache.NodeMessage, error) {
	ret := _m.Called(nodeAddr, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *cache.NodeMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *cache.NodeMessage) (*cache.NodeMessage, error)); ok {
		return rf(nodeAddr, msg)
	}
	if rf, ok := ret.Get(0).(func(string, *cache.NodeMessage) *cache.NodeMessage); ok {
		r0 = rf(nodeAddr, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.NodeMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *cache.NodeMessage) error); ok {
		r1 = rf(nodeAddr, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeTransporter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type NodeTransporter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - nodeAddr string
//   - msg *cache.NodeMessage
func (_e *NodeTransporter_Expecter) Send(nodeAddr interface{}, msg interface{}) *NodeTransporter_Send_Call {
	return &NodeTransporter_Send_Call{Call: _e.mock.On("Send", nodeAddr, msg)}
}

func (_c *NodeTransporter_Send_Call) Run(run func(nodeAddr string, msg *cache.NodeMessage)) *NodeTransporter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*cache.NodeMessage))
	})
	return _c
}

func (_c *NodeTransporter_Send_Call) Return(_a0 *cache.NodeMessage, _a1 error) *NodeTransporter_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeTransporter_Send_Call) RunAndReturn(run func(string, *cache.NodeMessage) (*cache.NodeMessage, error)) *NodeTransporter_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *NodeTransporter) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeTransporter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type NodeTransporter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *NodeTransporter_Expecter) Start() *NodeTransporter_Start_Call {
	return &NodeTransporter_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *NodeTransporter_Start_Call) Run(run func()) *NodeTransporter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeTransporter_Start_Call) Return(_a0 error) *NodeTransporter_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeTransporter_Start_Call) RunAndReturn(run func() error) *NodeTransporter_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *NodeTransporter) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeTransporter_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type NodeTransporter_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *NodeTransporter_Expecter) Stop() *NodeTransporter_Stop_Call {
	return &NodeTransporter_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *NodeTransporter_Stop_Call) Run(run func()) *NodeTransporter_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeTransporter_Stop_Call) Return(_a0 error) *NodeTransporter_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeTransporter_Stop_Call) RunAndReturn(run func() error) *NodeTransporter_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeTransporter creates a new instance of NodeTransporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeTransporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeTransporter {
	mock := &NodeTransporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
