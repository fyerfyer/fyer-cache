// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MessagePublisher is an autogenerated mock type for the MessagePublisher type
type MessagePublisher struct {
	mock.Mock
}

type MessagePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MessagePublisher) EXPECT() *MessagePublisher_Expecter {
	return &MessagePublisher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MessagePublisher) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MessagePublisher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MessagePublisher_Expecter) Close() *MessagePublisher_Close_Call {
	return &MessagePublisher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MessagePublisher_Close_Call) Run(run func()) *MessagePublisher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessagePublisher_Close_Call) Return(_a0 error) *MessagePublisher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePublisher_Close_Call) RunAndReturn(run func() error) *MessagePublisher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, msg
func (_m *MessagePublisher) Publish(ctx context.Context, topic string, msg []byte) error {
	ret := _m.Called(ctx, topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MessagePublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - msg []byte
func (_e *MessagePublisher_Expecter) Publish(ctx interface{}, topic interface{}, msg interface{}) *MessagePublisher_Publish_Call {
	return &MessagePublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, msg)}
}

func (_c *MessagePublisher_Publish_Call) Run(run func(ctx context.Context, topic string, msg []byte)) *MessagePublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MessagePublisher_Publish_Call) Return(_a0 error) *MessagePublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePublisher_Publish_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MessagePublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, handler
func (_m *MessagePublisher) Subscribe(topic string, handler func([]byte)) error {
	ret := _m.Called(topic, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]byte)) error); ok {
		r0 = rf(topic, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagePublisher_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MessagePublisher_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - handler func([]byte)
func (_e *MessagePublisher_Expecter) Subscribe(topic interface{}, handler interface{}) *MessagePublisher_Subscribe_Call {
	return &MessagePublisher_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, handler)}
}

func (_c *MessagePublisher_Subscribe_Call) Run(run func(topic string, handler func([]byte))) *MessagePublisher_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func([]byte)))
	})
	return _c
}

func (_c *MessagePublisher_Subscribe_Call) Return(_a0 error) *MessagePublisher_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagePublisher_Subscribe_Call) RunAndReturn(run func(string, func([]byte)) error) *MessagePublisher_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessagePublisher creates a new instance of MessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagePublisher {
	mock := &MessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
