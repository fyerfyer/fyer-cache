// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DataSource is an autogenerated mock type for the DataSource type
type DataSource struct {
	mock.Mock
}

type DataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *DataSource) EXPECT() *DataSource_Expecter {
	return &DataSource_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, key
func (_m *DataSource) Load(ctx context.Context, key string) (interface{}, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataSource_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type DataSource_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *DataSource_Expecter) Load(ctx interface{}, key interface{}) *DataSource_Load_Call {
	return &DataSource_Load_Call{Call: _e.mock.On("Load", ctx, key)}
}

func (_c *DataSource_Load_Call) Run(run func(ctx context.Context, key string)) *DataSource_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataSource_Load_Call) Return(_a0 interface{}, _a1 error) *DataSource_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataSource_Load_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *DataSource_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, key
func (_m *DataSource) Remove(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataSource_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type DataSource_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *DataSource_Expecter) Remove(ctx interface{}, key interface{}) *DataSource_Remove_Call {
	return &DataSource_Remove_Call{Call: _e.mock.On("Remove", ctx, key)}
}

func (_c *DataSource_Remove_Call) Run(run func(ctx context.Context, key string)) *DataSource_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DataSource_Remove_Call) Return(_a0 error) *DataSource_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataSource_Remove_Call) RunAndReturn(run func(context.Context, string) error) *DataSource_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, key, value
func (_m *DataSource) Store(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataSource_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type DataSource_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
func (_e *DataSource_Expecter) Store(ctx interface{}, key interface{}, value interface{}) *DataSource_Store_Call {
	return &DataSource_Store_Call{Call: _e.mock.On("Store", ctx, key, value)}
}

func (_c *DataSource_Store_Call) Run(run func(ctx context.Context, key string, value interface{})) *DataSource_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *DataSource_Store_Call) Return(_a0 error) *DataSource_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataSource_Store_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *DataSource_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataSource creates a new instance of DataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataSource {
	mock := &DataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
