// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	replication "github.com/fyerfyer/fyer-cache/cache/replication"
	mock "github.com/stretchr/testify/mock"
)

// LeaderNode is an autogenerated mock type for the LeaderNode type
type LeaderNode struct {
	mock.Mock
}

type LeaderNode_Expecter struct {
	mock *mock.Mock
}

func (_m *LeaderNode) EXPECT() *LeaderNode_Expecter {
	return &LeaderNode_Expecter{mock: &_m.Mock}
}

// AddFollower provides a mock function with given fields: nodeID, address
func (_m *LeaderNode) AddFollower(nodeID string, address string) error {
	ret := _m.Called(nodeID, address)

	if len(ret) == 0 {
		panic("no return value specified for AddFollower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(nodeID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_AddFollower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFollower'
type LeaderNode_AddFollower_Call struct {
	*mock.Call
}

// AddFollower is a helper method to define mock.On call
//   - nodeID string
//   - address string
func (_e *LeaderNode_Expecter) AddFollower(nodeID interface{}, address interface{}) *LeaderNode_AddFollower_Call {
	return &LeaderNode_AddFollower_Call{Call: _e.mock.On("AddFollower", nodeID, address)}
}

func (_c *LeaderNode_AddFollower_Call) Run(run func(nodeID string, address string)) *LeaderNode_AddFollower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *LeaderNode_AddFollower_Call) Return(_a0 error) *LeaderNode_AddFollower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_AddFollower_Call) RunAndReturn(run func(string, string) error) *LeaderNode_AddFollower_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyEntry provides a mock function with given fields: ctx, entry
func (_m *LeaderNode) ApplyEntry(ctx context.Context, entry *replication.ReplicationEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for ApplyEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *replication.ReplicationEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_ApplyEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyEntry'
type LeaderNode_ApplyEntry_Call struct {
	*mock.Call
}

// ApplyEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *replication.ReplicationEntry
func (_e *LeaderNode_Expecter) ApplyEntry(ctx interface{}, entry interface{}) *LeaderNode_ApplyEntry_Call {
	return &LeaderNode_ApplyEntry_Call{Call: _e.mock.On("ApplyEntry", ctx, entry)}
}

func (_c *LeaderNode_ApplyEntry_Call) Run(run func(ctx context.Context, entry *replication.ReplicationEntry)) *LeaderNode_ApplyEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*replication.ReplicationEntry))
	})
	return _c
}

func (_c *LeaderNode_ApplyEntry_Call) Return(_a0 error) *LeaderNode_ApplyEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_ApplyEntry_Call) RunAndReturn(run func(context.Context, *replication.ReplicationEntry) error) *LeaderNode_ApplyEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function with no fields
func (_m *LeaderNode) GetFollowers() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// LeaderNode_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type LeaderNode_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) GetFollowers() *LeaderNode_GetFollowers_Call {
	return &LeaderNode_GetFollowers_Call{Call: _e.mock.On("GetFollowers")}
}

func (_c *LeaderNode_GetFollowers_Call) Run(run func()) *LeaderNode_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_GetFollowers_Call) Return(_a0 map[string]string) *LeaderNode_GetFollowers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_GetFollowers_Call) RunAndReturn(run func() map[string]string) *LeaderNode_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeader provides a mock function with no fields
func (_m *LeaderNode) GetLeader() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLeader")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LeaderNode_GetLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeader'
type LeaderNode_GetLeader_Call struct {
	*mock.Call
}

// GetLeader is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) GetLeader() *LeaderNode_GetLeader_Call {
	return &LeaderNode_GetLeader_Call{Call: _e.mock.On("GetLeader")}
}

func (_c *LeaderNode_GetLeader_Call) Run(run func()) *LeaderNode_GetLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_GetLeader_Call) Return(_a0 string) *LeaderNode_GetLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_GetLeader_Call) RunAndReturn(run func() string) *LeaderNode_GetLeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLog provides a mock function with no fields
func (_m *LeaderNode) GetLog() replication.ReplicationLog {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLog")
	}

	var r0 replication.ReplicationLog
	if rf, ok := ret.Get(0).(func() replication.ReplicationLog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(replication.ReplicationLog)
		}
	}

	return r0
}

// LeaderNode_GetLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLog'
type LeaderNode_GetLog_Call struct {
	*mock.Call
}

// GetLog is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) GetLog() *LeaderNode_GetLog_Call {
	return &LeaderNode_GetLog_Call{Call: _e.mock.On("GetLog")}
}

func (_c *LeaderNode_GetLog_Call) Run(run func()) *LeaderNode_GetLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_GetLog_Call) Return(_a0 replication.ReplicationLog) *LeaderNode_GetLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_GetLog_Call) RunAndReturn(run func() replication.ReplicationLog) *LeaderNode_GetLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with no fields
func (_m *LeaderNode) GetRole() replication.ReplicationRole {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 replication.ReplicationRole
	if rf, ok := ret.Get(0).(func() replication.ReplicationRole); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(replication.ReplicationRole)
	}

	return r0
}

// LeaderNode_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type LeaderNode_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) GetRole() *LeaderNode_GetRole_Call {
	return &LeaderNode_GetRole_Call{Call: _e.mock.On("GetRole")}
}

func (_c *LeaderNode_GetRole_Call) Run(run func()) *LeaderNode_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_GetRole_Call) Return(_a0 replication.ReplicationRole) *LeaderNode_GetRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_GetRole_Call) RunAndReturn(run func() replication.ReplicationRole) *LeaderNode_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFollower provides a mock function with given fields: nodeID
func (_m *LeaderNode) RemoveFollower(nodeID string) error {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFollower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_RemoveFollower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFollower'
type LeaderNode_RemoveFollower_Call struct {
	*mock.Call
}

// RemoveFollower is a helper method to define mock.On call
//   - nodeID string
func (_e *LeaderNode_Expecter) RemoveFollower(nodeID interface{}) *LeaderNode_RemoveFollower_Call {
	return &LeaderNode_RemoveFollower_Call{Call: _e.mock.On("RemoveFollower", nodeID)}
}

func (_c *LeaderNode_RemoveFollower_Call) Run(run func(nodeID string)) *LeaderNode_RemoveFollower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LeaderNode_RemoveFollower_Call) Return(_a0 error) *LeaderNode_RemoveFollower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_RemoveFollower_Call) RunAndReturn(run func(string) error) *LeaderNode_RemoveFollower_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateEntries provides a mock function with given fields: ctx
func (_m *LeaderNode) ReplicateEntries(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateEntries")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_ReplicateEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateEntries'
type LeaderNode_ReplicateEntries_Call struct {
	*mock.Call
}

// ReplicateEntries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LeaderNode_Expecter) ReplicateEntries(ctx interface{}) *LeaderNode_ReplicateEntries_Call {
	return &LeaderNode_ReplicateEntries_Call{Call: _e.mock.On("ReplicateEntries", ctx)}
}

func (_c *LeaderNode_ReplicateEntries_Call) Run(run func(ctx context.Context)) *LeaderNode_ReplicateEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LeaderNode_ReplicateEntries_Call) Return(_a0 error) *LeaderNode_ReplicateEntries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_ReplicateEntries_Call) RunAndReturn(run func(context.Context) error) *LeaderNode_ReplicateEntries_Call {
	_c.Call.Return(run)
	return _c
}

// RequestSync provides a mock function with given fields: ctx, target, req
func (_m *LeaderNode) RequestSync(ctx context.Context, target string, req *replication.SyncRequest) (*replication.SyncResponse, error) {
	ret := _m.Called(ctx, target, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestSync")
	}

	var r0 *replication.SyncResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *replication.SyncRequest) (*replication.SyncResponse, error)); ok {
		return rf(ctx, target, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *replication.SyncRequest) *replication.SyncResponse); ok {
		r0 = rf(ctx, target, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*replication.SyncResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *replication.SyncRequest) error); ok {
		r1 = rf(ctx, target, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaderNode_RequestSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSync'
type LeaderNode_RequestSync_Call struct {
	*mock.Call
}

// RequestSync is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - req *replication.SyncRequest
func (_e *LeaderNode_Expecter) RequestSync(ctx interface{}, target interface{}, req interface{}) *LeaderNode_RequestSync_Call {
	return &LeaderNode_RequestSync_Call{Call: _e.mock.On("RequestSync", ctx, target, req)}
}

func (_c *LeaderNode_RequestSync_Call) Run(run func(ctx context.Context, target string, req *replication.SyncRequest)) *LeaderNode_RequestSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*replication.SyncRequest))
	})
	return _c
}

func (_c *LeaderNode_RequestSync_Call) Return(_a0 *replication.SyncResponse, _a1 error) *LeaderNode_RequestSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LeaderNode_RequestSync_Call) RunAndReturn(run func(context.Context, string, *replication.SyncRequest) (*replication.SyncResponse, error)) *LeaderNode_RequestSync_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeartbeat provides a mock function with given fields: ctx
func (_m *LeaderNode) SendHeartbeat(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_SendHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeartbeat'
type LeaderNode_SendHeartbeat_Call struct {
	*mock.Call
}

// SendHeartbeat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LeaderNode_Expecter) SendHeartbeat(ctx interface{}) *LeaderNode_SendHeartbeat_Call {
	return &LeaderNode_SendHeartbeat_Call{Call: _e.mock.On("SendHeartbeat", ctx)}
}

func (_c *LeaderNode_SendHeartbeat_Call) Run(run func(ctx context.Context)) *LeaderNode_SendHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LeaderNode_SendHeartbeat_Call) Return(_a0 error) *LeaderNode_SendHeartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_SendHeartbeat_Call) RunAndReturn(run func(context.Context) error) *LeaderNode_SendHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// SetRole provides a mock function with given fields: role
func (_m *LeaderNode) SetRole(role replication.ReplicationRole) {
	_m.Called(role)
}

// LeaderNode_SetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRole'
type LeaderNode_SetRole_Call struct {
	*mock.Call
}

// SetRole is a helper method to define mock.On call
//   - role replication.ReplicationRole
func (_e *LeaderNode_Expecter) SetRole(role interface{}) *LeaderNode_SetRole_Call {
	return &LeaderNode_SetRole_Call{Call: _e.mock.On("SetRole", role)}
}

func (_c *LeaderNode_SetRole_Call) Run(run func(role replication.ReplicationRole)) *LeaderNode_SetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(replication.ReplicationRole))
	})
	return _c
}

func (_c *LeaderNode_SetRole_Call) Return() *LeaderNode_SetRole_Call {
	_c.Call.Return()
	return _c
}

func (_c *LeaderNode_SetRole_Call) RunAndReturn(run func(replication.ReplicationRole)) *LeaderNode_SetRole_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *LeaderNode) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type LeaderNode_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) Start() *LeaderNode_Start_Call {
	return &LeaderNode_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *LeaderNode_Start_Call) Run(run func()) *LeaderNode_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_Start_Call) Return(_a0 error) *LeaderNode_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_Start_Call) RunAndReturn(run func() error) *LeaderNode_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *LeaderNode) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaderNode_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type LeaderNode_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *LeaderNode_Expecter) Stop() *LeaderNode_Stop_Call {
	return &LeaderNode_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *LeaderNode_Stop_Call) Run(run func()) *LeaderNode_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LeaderNode_Stop_Call) Return(_a0 error) *LeaderNode_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LeaderNode_Stop_Call) RunAndReturn(run func() error) *LeaderNode_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewLeaderNode creates a new instance of LeaderNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeaderNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeaderNode {
	mock := &LeaderNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
