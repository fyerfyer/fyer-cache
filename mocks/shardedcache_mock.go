// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/fyerfyer/fyer-cache/cache"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ShardedCache is an autogenerated mock type for the ShardedCache type
type ShardedCache struct {
	mock.Mock
}

type ShardedCache_Expecter struct {
	mock *mock.Mock
}

func (_m *ShardedCache) EXPECT() *ShardedCache_Expecter {
	return &ShardedCache_Expecter{mock: &_m.Mock}
}

// AddNode provides a mock function with given fields: nodeID, _a1, weight
func (_m *ShardedCache) AddNode(nodeID string, _a1 cache.Cache, weight int) error {
	ret := _m.Called(nodeID, _a1, weight)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, cache.Cache, int) error); ok {
		r0 = rf(nodeID, _a1, weight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShardedCache_AddNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNode'
type ShardedCache_AddNode_Call struct {
	*mock.Call
}

// AddNode is a helper method to define mock.On call
//   - nodeID string
//   - _a1 cache.Cache
//   - weight int
func (_e *ShardedCache_Expecter) AddNode(nodeID interface{}, _a1 interface{}, weight interface{}) *ShardedCache_AddNode_Call {
	return &ShardedCache_AddNode_Call{Call: _e.mock.On("AddNode", nodeID, _a1, weight)}
}

func (_c *ShardedCache_AddNode_Call) Run(run func(nodeID string, _a1 cache.Cache, weight int)) *ShardedCache_AddNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(cache.Cache), args[2].(int))
	})
	return _c
}

func (_c *ShardedCache_AddNode_Call) Return(_a0 error) *ShardedCache_AddNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_AddNode_Call) RunAndReturn(run func(string, cache.Cache, int) error) *ShardedCache_AddNode_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, key
func (_m *ShardedCache) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShardedCache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type ShardedCache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *ShardedCache_Expecter) Del(ctx interface{}, key interface{}) *ShardedCache_Del_Call {
	return &ShardedCache_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *ShardedCache_Del_Call) Run(run func(ctx context.Context, key string)) *ShardedCache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShardedCache_Del_Call) Return(_a0 error) *ShardedCache_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_Del_Call) RunAndReturn(run func(context.Context, string) error) *ShardedCache_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *ShardedCache) Get(ctx context.Context, key string) (interface{}, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShardedCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ShardedCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *ShardedCache_Expecter) Get(ctx interface{}, key interface{}) *ShardedCache_Get_Call {
	return &ShardedCache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *ShardedCache_Get_Call) Run(run func(ctx context.Context, key string)) *ShardedCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShardedCache_Get_Call) Return(_a0 interface{}, _a1 error) *ShardedCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShardedCache_Get_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *ShardedCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCount provides a mock function with no fields
func (_m *ShardedCache) GetNodeCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ShardedCache_GetNodeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCount'
type ShardedCache_GetNodeCount_Call struct {
	*mock.Call
}

// GetNodeCount is a helper method to define mock.On call
func (_e *ShardedCache_Expecter) GetNodeCount() *ShardedCache_GetNodeCount_Call {
	return &ShardedCache_GetNodeCount_Call{Call: _e.mock.On("GetNodeCount")}
}

func (_c *ShardedCache_GetNodeCount_Call) Run(run func()) *ShardedCache_GetNodeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShardedCache_GetNodeCount_Call) Return(_a0 int) *ShardedCache_GetNodeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_GetNodeCount_Call) RunAndReturn(run func() int) *ShardedCache_GetNodeCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeIDs provides a mock function with no fields
func (_m *ShardedCache) GetNodeIDs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeIDs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ShardedCache_GetNodeIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeIDs'
type ShardedCache_GetNodeIDs_Call struct {
	*mock.Call
}

// GetNodeIDs is a helper method to define mock.On call
func (_e *ShardedCache_Expecter) GetNodeIDs() *ShardedCache_GetNodeIDs_Call {
	return &ShardedCache_GetNodeIDs_Call{Call: _e.mock.On("GetNodeIDs")}
}

func (_c *ShardedCache_GetNodeIDs_Call) Run(run func()) *ShardedCache_GetNodeIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShardedCache_GetNodeIDs_Call) Return(_a0 []string) *ShardedCache_GetNodeIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_GetNodeIDs_Call) RunAndReturn(run func() []string) *ShardedCache_GetNodeIDs_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNode provides a mock function with given fields: nodeID
func (_m *ShardedCache) RemoveNode(nodeID string) error {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShardedCache_RemoveNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNode'
type ShardedCache_RemoveNode_Call struct {
	*mock.Call
}

// RemoveNode is a helper method to define mock.On call
//   - nodeID string
func (_e *ShardedCache_Expecter) RemoveNode(nodeID interface{}) *ShardedCache_RemoveNode_Call {
	return &ShardedCache_RemoveNode_Call{Call: _e.mock.On("RemoveNode", nodeID)}
}

func (_c *ShardedCache_RemoveNode_Call) Run(run func(nodeID string)) *ShardedCache_RemoveNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ShardedCache_RemoveNode_Call) Return(_a0 error) *ShardedCache_RemoveNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_RemoveNode_Call) RunAndReturn(run func(string) error) *ShardedCache_RemoveNode_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, val, expiration
func (_m *ShardedCache) Set(ctx context.Context, key string, val interface{}, expiration time.Duration) error {
	ret := _m.Called(ctx, key, val, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, val, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShardedCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type ShardedCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - val interface{}
//   - expiration time.Duration
func (_e *ShardedCache_Expecter) Set(ctx interface{}, key interface{}, val interface{}, expiration interface{}) *ShardedCache_Set_Call {
	return &ShardedCache_Set_Call{Call: _e.mock.On("Set", ctx, key, val, expiration)}
}

func (_c *ShardedCache_Set_Call) Run(run func(ctx context.Context, key string, val interface{}, expiration time.Duration)) *ShardedCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *ShardedCache_Set_Call) Return(_a0 error) *ShardedCache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShardedCache_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *ShardedCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewShardedCache creates a new instance of ShardedCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShardedCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShardedCache {
	mock := &ShardedCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
