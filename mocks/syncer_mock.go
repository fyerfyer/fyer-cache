// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	replication "github.com/fyerfyer/fyer-cache/cache/replication"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Syncer is an autogenerated mock type for the Syncer type
type Syncer struct {
	mock.Mock
}

type Syncer_Expecter struct {
	mock *mock.Mock
}

func (_m *Syncer) EXPECT() *Syncer_Expecter {
	return &Syncer_Expecter{mock: &_m.Mock}
}

// ApplySync provides a mock function with given fields: ctx, entries
func (_m *Syncer) ApplySync(ctx context.Context, entries []*replication.ReplicationEntry) error {
	ret := _m.Called(ctx, entries)

	if len(ret) == 0 {
		panic("no return value specified for ApplySync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*replication.ReplicationEntry) error); ok {
		r0 = rf(ctx, entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_ApplySync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySync'
type Syncer_ApplySync_Call struct {
	*mock.Call
}

// ApplySync is a helper method to define mock.On call
//   - ctx context.Context
//   - entries []*replication.ReplicationEntry
func (_e *Syncer_Expecter) ApplySync(ctx interface{}, entries interface{}) *Syncer_ApplySync_Call {
	return &Syncer_ApplySync_Call{Call: _e.mock.On("ApplySync", ctx, entries)}
}

func (_c *Syncer_ApplySync_Call) Run(run func(ctx context.Context, entries []*replication.ReplicationEntry)) *Syncer_ApplySync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*replication.ReplicationEntry))
	})
	return _c
}

func (_c *Syncer_ApplySync_Call) Return(_a0 error) *Syncer_ApplySync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_ApplySync_Call) RunAndReturn(run func(context.Context, []*replication.ReplicationEntry) error) *Syncer_ApplySync_Call {
	_c.Call.Return(run)
	return _c
}

// FullSync provides a mock function with given fields: ctx, target
func (_m *Syncer) FullSync(ctx context.Context, target string) error {
	ret := _m.Called(ctx, target)

	if len(ret) == 0 {
		panic("no return value specified for FullSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_FullSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullSync'
type Syncer_FullSync_Call struct {
	*mock.Call
}

// FullSync is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
func (_e *Syncer_Expecter) FullSync(ctx interface{}, target interface{}) *Syncer_FullSync_Call {
	return &Syncer_FullSync_Call{Call: _e.mock.On("FullSync", ctx, target)}
}

func (_c *Syncer_FullSync_Call) Run(run func(ctx context.Context, target string)) *Syncer_FullSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Syncer_FullSync_Call) Return(_a0 error) *Syncer_FullSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_FullSync_Call) RunAndReturn(run func(context.Context, string) error) *Syncer_FullSync_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementalSync provides a mock function with given fields: ctx, target, startIndex
func (_m *Syncer) IncrementalSync(ctx context.Context, target string, startIndex uint64) error {
	ret := _m.Called(ctx, target, startIndex)

	if len(ret) == 0 {
		panic("no return value specified for IncrementalSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, target, startIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_IncrementalSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementalSync'
type Syncer_IncrementalSync_Call struct {
	*mock.Call
}

// IncrementalSync is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - startIndex uint64
func (_e *Syncer_Expecter) IncrementalSync(ctx interface{}, target interface{}, startIndex interface{}) *Syncer_IncrementalSync_Call {
	return &Syncer_IncrementalSync_Call{Call: _e.mock.On("IncrementalSync", ctx, target, startIndex)}
}

func (_c *Syncer_IncrementalSync_Call) Run(run func(ctx context.Context, target string, startIndex uint64)) *Syncer_IncrementalSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *Syncer_IncrementalSync_Call) Return(_a0 error) *Syncer_IncrementalSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_IncrementalSync_Call) RunAndReturn(run func(context.Context, string, uint64) error) *Syncer_IncrementalSync_Call {
	_c.Call.Return(run)
	return _c
}

// RecordDelOperation provides a mock function with given fields: key, term
func (_m *Syncer) RecordDelOperation(key string, term uint64) error {
	ret := _m.Called(key, term)

	if len(ret) == 0 {
		panic("no return value specified for RecordDelOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(key, term)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_RecordDelOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordDelOperation'
type Syncer_RecordDelOperation_Call struct {
	*mock.Call
}

// RecordDelOperation is a helper method to define mock.On call
//   - key string
//   - term uint64
func (_e *Syncer_Expecter) RecordDelOperation(key interface{}, term interface{}) *Syncer_RecordDelOperation_Call {
	return &Syncer_RecordDelOperation_Call{Call: _e.mock.On("RecordDelOperation", key, term)}
}

func (_c *Syncer_RecordDelOperation_Call) Run(run func(key string, term uint64)) *Syncer_RecordDelOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64))
	})
	return _c
}

func (_c *Syncer_RecordDelOperation_Call) Return(_a0 error) *Syncer_RecordDelOperation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_RecordDelOperation_Call) RunAndReturn(run func(string, uint64) error) *Syncer_RecordDelOperation_Call {
	_c.Call.Return(run)
	return _c
}

// RecordSetOperation provides a mock function with given fields: key, value, expiration, term
func (_m *Syncer) RecordSetOperation(key string, value []byte, expiration time.Duration, term uint64) error {
	ret := _m.Called(key, value, expiration, term)

	if len(ret) == 0 {
		panic("no return value specified for RecordSetOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, time.Duration, uint64) error); ok {
		r0 = rf(key, value, expiration, term)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_RecordSetOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordSetOperation'
type Syncer_RecordSetOperation_Call struct {
	*mock.Call
}

// RecordSetOperation is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - expiration time.Duration
//   - term uint64
func (_e *Syncer_Expecter) RecordSetOperation(key interface{}, value interface{}, expiration interface{}, term interface{}) *Syncer_RecordSetOperation_Call {
	return &Syncer_RecordSetOperation_Call{Call: _e.mock.On("RecordSetOperation", key, value, expiration, term)}
}

func (_c *Syncer_RecordSetOperation_Call) Run(run func(key string, value []byte, expiration time.Duration, term uint64)) *Syncer_RecordSetOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(time.Duration), args[3].(uint64))
	})
	return _c
}

func (_c *Syncer_RecordSetOperation_Call) Return(_a0 error) *Syncer_RecordSetOperation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_RecordSetOperation_Call) RunAndReturn(run func(string, []byte, time.Duration, uint64) error) *Syncer_RecordSetOperation_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *Syncer) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Syncer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Syncer_Expecter) Start() *Syncer_Start_Call {
	return &Syncer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Syncer_Start_Call) Run(run func()) *Syncer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Syncer_Start_Call) Return(_a0 error) *Syncer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_Start_Call) RunAndReturn(run func() error) *Syncer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *Syncer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Syncer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Syncer_Expecter) Stop() *Syncer_Stop_Call {
	return &Syncer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Syncer_Stop_Call) Run(run func()) *Syncer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Syncer_Stop_Call) Return(_a0 error) *Syncer_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_Stop_Call) RunAndReturn(run func() error) *Syncer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncer creates a new instance of Syncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Syncer {
	mock := &Syncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
